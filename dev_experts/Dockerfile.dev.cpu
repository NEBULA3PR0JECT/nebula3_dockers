FROM ubuntu:18.04
# See http://bugs.python.org/issue19846
ENV LANG C.UTF-8
#LABEL com.nvidia.volumes.needed="nvidia_driver"
COPY environment.yaml /environment.yaml
ENV PYTHON_VERSION=3.9
#ENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64
ENV PATH=$PATH:/opt/conda/bin/
ENV USER nebula

#RUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub
#RUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub
RUN apt-get update && apt-get install -y --no-install-recommends \
    vim \
    ca-certificates \
    build-essential \
    gcc \
    cmake \
    git \
    zip \
    unzip \
    nginx \
    openssh-client && \
    apt-get install -y --no-install-recommends curl wget && \
    apt-get install -y --no-install-recommends python-dev python3-pip python3-setuptools && \
    apt-get install ffmpeg libsm6 libxext6  -y && \
    rm -rf /var/lib/apt/lists/* && \
    curl -o ~/miniconda.sh -O  https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh  && \
    chmod +x ~/miniconda.sh && \
    ~/miniconda.sh -b -p /opt/conda && \
    rm ~/miniconda.sh && \
    /opt/conda/bin/conda install conda-build && \
    /opt/conda/bin/conda clean --all -y
#    /opt/conda/bin/conda env create -f environment.yaml && \

RUN /opt/conda/bin/conda config --append channels conda-forge && /opt/conda/bin/conda config --append channels pytorch && \
    if [ -f "/environment.yaml" ]; then umask 0002 && /opt/conda/bin/conda env update -n base -f /environment.yaml; fi \
    && conda clean --all --yes && rm /environment.yaml

WORKDIR /tmp
RUN CODE_SERVER_VERSION=4.1.0 && \
    ARCH="$(dpkg --print-architecture)" && \
    curl -fOL https://github.com/cdr/code-server/releases/download/v${CODE_SERVER_VERSION}/code-server_${CODE_SERVER_VERSION}_${ARCH}.deb

RUN CODE_SERVER_VERSION=4.1.0 && \
    ARCH="$(dpkg --print-architecture)" && \
    dpkg -i ./code-server_${CODE_SERVER_VERSION}_${ARCH}.deb && rm ./code-server_${CODE_SERVER_VERSION}_${ARCH}.deb

# Create Environment
ENV PATH /opt/conda/bin:$PATH
ENV PATH /opt/conda/envs/nebula/bin:$PATH
#COPY  run.sh /run.sh
COPY  dev_run.sh /run.sh
COPY jfont.settings  /root/.jupyter/lab/user-settings/\@jupyterlab/terminal-extension/plugin.jupyterlab-settings
COPY theme.settings /root/.jupyter/lab/user-settings/\@jupyterlab/apputils-extension/themes.jupyterlab-settings
# Set some environment variables. PYTHONUNBUFFERED keeps Python from buffering
#  our standard output stream, which means that logs can be delivered to the
# user quickly. PYTHONDONTWRITEBYTECODE keeps Python from writing the .pyc
# files which are unnecessary in this case. We also update PATH so that the
# train and serve programs are found when the container is invoked.
ENV PYTHONUNBUFFERED=TRUE
ENV PYTHONDONTWRITEBYTECODE=TRUE
EXPOSE 8888
# Set up the program in the image
WORKDIR /notebooks
#ENTRYPOINT ["/run.sh"]
